import heapq

def dijkstra(graph, start):
    # Initialize the distances dictionary with infinite distances for all nodes except the start node
    distances = {node: float('infinity') for node in graph}
    distances[start] = 0

    # Initialize the priority queue with the start node
    priority_queue = [(0, start)]

    while priority_queue:
        # Get the node with the smallest distance
        curr_distance, curr_node = heapq.heappop(priority_queue)

        # If the current distance is greater than the recorded distance, skip this node
        if curr_distance > distances[curr_node]:
            continue

        # Update the distances of neighboring nodes
        for neighbor, weight in graph[curr_node].items():
            new_distance = curr_distance + weight

            # If the new distance is smaller, update the distances dictionary and add the neighbor to the queue
            if new_distance < distances[neighbor]:
                distances[neighbor] = new_distance
                heapq.heappush(priority_queue, (new_distance, neighbor))

    return distances

# Example graph represented as an adjacency dictionary
graph = {
    'A': {'B': 6, 'D': 1},
    'B': {'A': 6, 'C': 5, 'D': 2, 'E': 2},
    'C': {'B': 5, 'E': 5},
    'D': {'A': 1, 'B': 2, 'E': 1},
    'E': {'B': 2, 'C': 5, 'D': 1}
}

# Find the shortest path from node A to all other nodes
shortest_path = dijkstra(graph, 'A')
print(shortest_path)
